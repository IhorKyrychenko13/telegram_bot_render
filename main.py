import os
import telebot
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("models/gemini-1.5-flash-latest")

KEYWORDS_TO_IGNORE = [
    # –†—É—Å—Å–∫–∏–µ
    "–ø—Ä–æ–¥–∞–µ—Ç—Å—è", "–≤ –Ω–∞–ª–∏—á–∏–∏", "–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å", "–∑–∞ —Å–∫–æ–ª—å–∫–æ", "—Ü–µ–Ω–∞",
    "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–∫—É–ø–∏—Ç—å", "–ø—Ä–æ–¥–∞–º", "–Ω–∞–ª–∏—á–∏–µ", "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è",
    "–¥–æ—Å—Ç–∞–≤–∫–∞", "–∞–ª–º–µ—Ä–µ", "–µ—â—ë –µ—Å—Ç—å", "–¥–æ—Å—Ç—É–ø–µ–Ω", "–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å",
    "–ø—Ä–æ–¥–∞—é", "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "—Ç–æ—Ä–≥", "—Å–∞–º–æ–≤—ã–≤–æ–∑", "–æ—Ç–¥–∞–º", "–∑–∞–±—Ä–∞—Ç—å",
    "–∞–∫—Ç—É–∞–ª—å–Ω–æ", "–µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ", "–µ—Å—Ç—å –ª–∏", "–æ—Å—Ç–∞–ª–æ—Å—å", "–Ω–æ–≤—ã–π", "–±/—É", "–±—É—à–Ω—ã–π", "–±—ç—É—à–Ω—ã–π",

    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ
    "–ø—Ä–æ–¥–∞—î—Ç—å—Å—è", "–≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ", "–º–æ–∂–Ω–∞ –∑–∞–±—Ä–∞—Ç–∏", "—Å–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î",
    "—Ü—ñ–Ω–∞", "–≤–∞—Ä—Ç—ñ—Å—Ç—å", "–∫—É–ø–∏—Ç–∏", "–ø—Ä–æ–¥–∞–º", "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å", "–¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è",
    "–¥–æ—Å—Ç–∞–≤–∫–∞", "–∞–ª–º–µ—Ä–∞", "—â–µ —î", "–¥–æ—Å—Ç—É–ø–Ω–∏–π", "–º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏",
    "–≤—ñ–¥–¥–∞–º", "–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", "—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ", "–∞–∫—Ç—É–∞–ª—å–Ω–æ", "—Å–∞–º–æ–≤–∏–≤—ñ–∑", "–Ω–æ–≤–∏–π", "–±/—É", "–±—É—à–Ω–µ",

    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "for sale", "price", "available", "can pick up", "delivery",
    "location", "how much", "still available", "buy", "sell", "selling", "giveaway",

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    "–æ—Ç–¥–∞—é –¥–∞—Ä–æ–º", "—Ü–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞", "–∫—Ç–æ –∑–∞–±–µ—Ä—ë—Ç", "–º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å", "–æ—Å—Ç–∞–ª—Å—è –ª–∏", 
    "–∞–∫—Ç—É–∞–ª—å–Ω–æ –ª–∏", "–∫–æ–º—É –Ω—É–∂–Ω–æ", "–µ—â—ë –ø—Ä–æ–¥–∞—ë—Ç—Å—è", "–ø–æ —á—ë–º", "–ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ", 
    "–∫—É–¥–∞ –∑–∞–±–∏—Ä–∞—Ç—å", "–Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞", "–µ—â—ë –º–æ–∂–Ω–æ –≤–∑—è—Ç—å", "–ø—Ä–æ–¥–∞–∂–∞"
]
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_message(message):
    text = message.text.lower()

    # ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã (—Å '?')
    if "?" not in text:
        return

    # üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –ø—Ä–æ–¥–∞–∂–µ
    if any(keyword in text for keyword in KEYWORDS_TO_IGNORE):
        return

    bot.send_chat_action(message.chat.id, 'typing')

    prompt = f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞–º. –í–æ–ø—Ä–æ—Å: {message.text}\n–û—Ç–≤–µ—Ç:"

    try:
        response = model.generate_content(prompt)
        reply = response.text.strip()

        # ‚úÇÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
        if len(reply) > 300:
            reply = reply[:297] + "..."

        bot.reply_to(message, reply)

    except Exception as e:
        print("–û—à–∏–±–∫–∞ Gemini:", e)
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Gemini API.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.polling()